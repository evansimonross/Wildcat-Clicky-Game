{"version":3,"sources":["components/CatCard/CatCard.js","App.js","serviceWorker.js","index.js"],"names":["rename","image","substring","indexOf","split","map","e","toUpperCase","length","join","CatCard","click","_this","props","clicked","endGame","pointUp","id","react_default","a","createElement","className","src","this","alt","title","onClick","Component","STARTING_AMT","ABSOLUTE_MAX","LEVEL_UP_AMT","newGame","array","number","random","i","r","Math","floor","includes","push","App","state","max","game","cats","points","best","level","console","log","modal","setState","newMax","_this2","temporaryValue","randomIndex","currentIndex","shuffle","components_CatCard_CatCard","key","lib","header","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c27248be.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./CatCard.css\";\n\nconst rename = (image) => {\n  let name = image.substring(0, image.indexOf(\".\"));\n  return name.split(\"-\").map(e => e.substring(0, 1).toUpperCase() + e.substring(1, e.length)).join(\" \");\n}\n\nclass CatCard extends Component {\n\n  click = () => {\n    if (this.props.clicked) {\n      this.props.endGame();\n    }\n    else {\n      this.props.pointUp(this.props.id);\n    }\n  }\n\n  render() {\n    return (\n      <img className=\"cat\" src={\"/build/images/\" + this.props.image}\n        alt={rename(this.props.image)} title={rename(this.props.image)} \n        onClick={this.click}></img>\n    );\n  }\n}\n\nexport default CatCard;","import React, { Component } from 'react';\nimport CatCard from \"./components/CatCard\";\nimport { Modal } from 'react-materialize';\nimport cats from \"./cats.json\";\nimport './App.css';\n\nconst STARTING_AMT = 8;\nconst ABSOLUTE_MAX = 32;\nconst LEVEL_UP_AMT = 3;\n\nconst newGame = (array, number) => {\n  if (number > array.length) { number = array.length; }\n  let random = [];\n  for (let i = 0; i < number; i++) {\n    let r = Math.floor(Math.random() * array.length);\n    while (random.includes(r)) {\n      r = Math.floor(Math.random() * array.length);\n    }\n    random.push(r);\n  }\n  return random.map(e => array[e]).map(e => {\n    e.clicked = false;\n    return e;\n  });\n}\n\nconst shuffle = array => {\n  let currentIndex = array.length, temporaryValue, randomIndex;\n\n  while (0 !== currentIndex) {\n\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}\n\nclass App extends Component {\n  state = {\n    max: STARTING_AMT,\n    game: newGame(cats, STARTING_AMT),\n    points: 0,\n    best: 0,\n    level: 1\n  }\n\n  // TODO: Add game over notification\n  endGame = () => {\n    console.log(this.modal);\n    this.setState({\n      game: newGame(cats, this.state.max),\n      points: 0\n    });\n  }\n\n  // TODO: Add notifications when level changes\n  pointUp = id => {\n    if (this.state.points >= this.state.max - 1) {\n      let newMax = this.state.max + LEVEL_UP_AMT;\n      if (newMax > ABSOLUTE_MAX) {\n        // Start a new game at base level. The player has already beat max level\n        this.setState({\n          max: STARTING_AMT,\n          game: newGame(cats, STARTING_AMT),\n          points: 0,\n          best: this.state.best + 1,\n          level: 1\n        });\n      }\n      else {\n        // Move to next level\n        this.setState({\n          max: newMax,\n          game: newGame(cats, newMax),\n          points: 0,\n          best: this.state.best + 1,\n          level: (newMax - (STARTING_AMT - LEVEL_UP_AMT)) / LEVEL_UP_AMT\n        });\n      }\n    }\n    else {\n      // Just give a point, level doesn't change\n      this.setState({\n        game: this.state.game.map(e => {\n          return e.id === id ? { id: e.id, image: e.image, clicked: true } : e\n        }),\n        points: this.state.points + 1,\n        best: this.state.points + 1 > this.state.best ? this.state.points + 1 : this.state.best\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Wildcat Clicky Game</h1>\n        <h5>Points: {this.state.points}&nbsp;Best: {this.state.best}&nbsp;Level: {this.state.level}</h5>\n        {shuffle(this.state.game).map(e => <CatCard key={e.id} id={e.id} image={e.image} endGame={this.endGame} pointUp={this.pointUp} clicked={e.clicked} />)}\n        <div>\n          <Modal\n            id='modal'\n            header='Modal Header'>\n            Lorem ipsum dolor sit amet\n          </Modal>\n        </div>;\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}